import type { JwtRepository } from './JwtRepository';
import type { JwtToken } from './JwtToken';
/**
 * JwtResolver type. It is used to define the structure for JWT resolver instances.
 * JwtResolver contains a method getJwt that should return a Promise with a JWT and optionally extra information.
 *
 * @template ExtraInfo The type of the optional extra information returned by the getJwt method. Defaults to undefined.
 * @property {() => Promise<{ jwt: string; extraInfo: ExtraInfo }>} getJwt Method for getting a JWT.
 */
export type JwtResolver<ExtraInfo = undefined> = {
    getJwt(): Promise<{
        jwt: string;
        extraInfo: ExtraInfo;
    }>;
};
/**
 * JwtManagerOptions bag
 *
 * keepTokenUpdated: indicates whether the token should be updated each time it nears expiration
 * @property {boolean}
 */
export type JwtManagerOptions = {
    keepTokenUpdated?: boolean;
};
/**
 * JwtManager class.
 * It provides methods for managing JWT (Json Web Token), such as retrieving and refreshing.
 *
 * @template T The data type the JwtToken carries. Default to unknown.
 * @template ExtraInfo The type of the optional extra information returned by the getJwt method. Defaults to undefined.
 * @property {JwtRepository<T, ExtraInfo>} jwtRepository JwtRepository instance used for token management.
 * @property {JwtResolver<ExtraInfo>} resolver JwtResolver instance used for token retrieval.
 */
export declare class JwtManager<T = unknown, ExtraInfo = undefined> {
    private jwtRepository;
    private resolver;
    private inflightPromise?;
    /**
     * Constructor for JwtManager class.
     *
     * @param {JwtRepository<T, ExtraInfo>} jwtRepository JwtRepository instance used for token management.
     * @param {JwtResolver<ExtraInfo>} resolver JwtResolver instance used for token retrieval.
     * @param {JwtManagerOptions} options JwtManagerOptions bag to customize behavior.
     */
    constructor(jwtRepository: JwtRepository<T, ExtraInfo>, resolver: JwtResolver<ExtraInfo>, options?: JwtManagerOptions);
    /**
     * Method to get a JWT token.
     * If there's a token request in progress, it will return the Promise of this request.
     * If the current token is undefined or expired, it will initiate a token refresh.
     * Otherwise, it will return the current token.
     *
     * @returns {JwtToken<T, ExtraInfo> | Promise<JwtToken<T, ExtraInfo>>} The current token or the Promise of a token request.
     */
    getJwt(): JwtToken<T, ExtraInfo> | Promise<JwtToken<T, ExtraInfo>>;
    /**
     * Method to refresh a JWT token.
     * If a refresh request is already in progress, it will return the Promise of this request.
     * Otherwise, it will start a new refresh request and return its Promise.
     *
     * @returns {Promise<JwtToken<T, ExtraInfo>>} Promise of the refreshed token.
     */
    refreshToken(): Promise<JwtToken<T, ExtraInfo>>;
    /**
     * Method to check if a token refresh is in progress.
     *
     * @returns {boolean} true if a token refresh is in progress, false otherwise.
     */
    get isRefreshingToken(): boolean;
}

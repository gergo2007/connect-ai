import { JwtToken } from './JwtToken';
import type { LoggerService } from '@luvio/utils';
/**
 * A repository for JWT tokens.
 */
export declare class JwtRepository<T = unknown, ExtraInfo = undefined> {
    private limitInSeconds;
    private defaultTokenTTLInSeconds;
    private logger;
    private _token?;
    private timeoutHandler?;
    private observers;
    /**
     * @param limitInSeconds - Time in seconds before the token's expiry to notify observers.
     * @param defaultTokenTTLInSeconds - Default token expiry time in seconds if "exp" claim is not present in token.
     * @param logger - Logger for logging warnings and errors.
     */
    constructor(limitInSeconds?: number, defaultTokenTTLInSeconds?: number, logger?: LoggerService);
    /**
     * Get the current token.
     */
    get token(): JwtToken<T, ExtraInfo> | undefined;
    /**
     * Set the current token.
     *
     * @param token - JWT token as a string.
     * @param extraInfo - Optional extra information.
     */
    setToken(token: string, extraInfo?: ExtraInfo): JwtToken<T, ExtraInfo>;
    /**
     * Remove the current token.
     */
    removeToken(): void;
    /**
     * Subscribe to the token nearing its expiration.
     *
     * @param cb - Callback function to execute when token is nearing expiration.
     */
    subscribeToTokenNearExpiration(cb: (token: JwtToken<T, ExtraInfo>) => void): () => void;
    /**
     * Clear the timeout handler.
     */
    private clearTimeoutHandler;
    /**
     * Observe and handle token expiration.
     */
    private observeTokenExpiration;
    /**
     * Compute the timeout time in milliseconds.
     */
    private computeTimeoutTimeInMs;
    /**
     * Notify all observers that the token is expiring.
     */
    private notifyTokenIsExpiring;
}

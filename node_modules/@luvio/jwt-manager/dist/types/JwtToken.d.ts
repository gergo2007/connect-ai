import type { JwtPayload } from 'jwt-decode';
/**
 * Represents a decoded JWT payload with a non-nullable 'exp' field and any additional payload T.
 */
export type JwtTokenInfo<T = unknown> = JwtPayload & {
    exp: NonNullable<JwtPayload['exp']>;
} & T;
/**
 * Represents a JWT token with its decoded info and optional extra info.
 *
 * @typeparam T - Type of the additional payload in the JWT.
 * @typeparam ExtraInfo - Type of the additional information.
 */
export declare class JwtToken<T = unknown, ExtraInfo = undefined> {
    private _token;
    private _decodedInfo;
    private _extraInfo?;
    /**
     * Create a new JwtToken.
     *
     * @param _token - The JWT string.
     * @param _decodedInfo - The decoded information from the JWT.
     * @param _extraInfo - Any additional information associated with the JWT.
     */
    constructor(_token: string, _decodedInfo: JwtTokenInfo<T>, _extraInfo?: ExtraInfo | undefined);
    /**
     * Get the JWT string.
     *
     * @returns The JWT string.
     */
    get token(): string;
    /**
     * Get the additional information associated with the JWT.
     *
     * @returns The additional information.
     */
    get extraInfo(): ExtraInfo | undefined;
    /**
     * Get the decoded information from the JWT.
     *
     * @returns The decoded information.
     */
    get decodedInfo(): JwtTokenInfo<T>;
    /**
     * Get the remaining time in seconds until the JWT expires.
     *
     * @returns The remaining time in seconds.
     */
    get tokenRemainingSeconds(): number;
    /**
     * Check if the JWT is expired.
     *
     * @returns True if the JWT is expired, false otherwise.
     */
    get isExpired(): boolean;
}
